from openai import OpenAI
from dotenv import load_dotenv
import os
import json

# Load environment variables from .env file
load_dotenv()

# Initialize the OpenAI client using your endpoint and token
client = OpenAI(
    api_key=os.getenv("OPENAI_API_KEY"),
)

def generate_luxury_tagline_from_json(product_description_image, product_attributes, analytics) -> str:
    """
    Accepts a JSON string (json_input) containing arbitrary product attributes.
    Iterates through all keys (including nested structures) and includes them in the GPT prompt.
    Returns a luxury-fashion-style tagline generated by GPT.
    """

    prompt_lines = [
        "You are an professional expert luxury fashion editor writing an editorial tagline for a new limited-edition product by a well-known luxury brand, who can also generate brand/SEO/story-assist outputs.",
        "Use only the information given and do not invent or embellish any details.",
        "Here are all the product attributes provided:"
    ]

    # Dynamically iterate over every top-level key in the dictionary
    for key, value in product_attributes.items():
        # Convert value to a nicely formatted JSON string (properly handle nested lists/dicts)
        # We indent nested objects by two spaces for readability
        if key in ["Editor's Notes","Images","url","Product Description"]:
            continue
        pretty_value = json.dumps(value, indent=2, ensure_ascii=False)
        # Prepend each line of the value with two spaces so it's clear it belongs under the key
        indented_value = "\n".join([f"  {line}" for line in pretty_value.splitlines()])
        # Append a line like "Key:" followed by the indented JSON value
        prompt_lines.append(f"- {key}:\n{indented_value}")

    # Add an instruction about tone and length
    prompt_lines.append("")
    prompt_lines.append("Requirements:")
    prompt_lines.append("- Weave in the brand’s heritage and craftsmanship legacy (if present).")
    prompt_lines.append("- Highlight any design inspiration, unique elements, or USPs provided.")
    prompt_lines.append("- Emphasize exclusivity and ethical sourcing (if those keys exist).")
    prompt_lines.append("- Use evocative, sensory language to appeal to discerning luxury buyers.")
    prompt_lines.append("- Maintain an aspirational, persuasive tone that encourages immediate consideration of purchase.")
    prompt_lines.append("- Keep the tagline under 50 words.")
    prompt_lines.append("- Include the keyword “Coach” in between the tagline only if the product description or image description explicitly mentions Coach or is clearly related to the Coach brand.")
    prompt_lines.append("\n ####")
    prompt_lines.extend([" Below is the visual description of the image. Do take into account while framing the Tagline.",
        f"{product_description_image}"])
    prompt_lines.append("\n ####")
    prompt_lines.append( "Analyze the Google Analytics report below, which lists each keyword along with its competition level (high/medium/low), "
    "average monthly searches, and search category. Using these insights, craft a captivating editorial tagline for a new limited-edition product "
    "from a well-known luxury fashion brand. The tagline should reflect exclusivity and prestige, while leveraging the competition and search volume "
    "data to make it both aspirational and discoverable by the target audience.")
    prompt_lines.append(f"{analytics}")
    prompt_lines.append("\n ####")
    prompt_lines.extend( [
        "=== INSTRUCTIONS ===",
        "1. Generate a **luxury editorial tagline** (under 100 words) that emphasizes the brand’s heritage, craftsmanship, exclusivity, and any USPs found in the attributes.",
        "2. Generate **Brand Assist**: a list of 3–5 short keywords or phrases that capture the brand’s identity, tone, and unique positioning.",
        "3. Generate **SEO Assist**: a list of 5–7 SEO-friendly keywords or phrases someone might search to find this product online.",
        "4. Generate **Story Assist**: a list of 4–6 narrative bullet points or short sentences that can be used to build a fuller product story (origins, inspiration, special details, usage scenario, etc.).",
        "",
        "Format your response exactly like this (so it’s easy to parse):",
        "```json",
        "{",
        '  "editorial_tagline": "...",',
        '  "brand_assist_keywords": ["...", "...", "..."],',
        '  "seo_assist_keywords": ["...", "...", "..."],',
        '  "story_assist_bullets": ["...", "...", "..."]',
        "}",
        "```"
        ])
    
    # Join all lines into a single prompt string
    full_prompt = "\n".join(prompt_lines)

    # print(full_prompt)

    # Call the OpenAI API with a low temperature to reduce hallucinations
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": "You are a world-class luxury fashion editor."},
            {"role": "user", "content": full_prompt}
        ],
        temperature=0.3,
        response_format={"type": "json_object"}
    )

    # Extract and return the generated tagline
    return response.choices[0].message.content.strip()


# import json

# def main():
#     with open("product_details.json", "r", encoding="utf-8") as file:
#         data = json.load(file)

#     from image_details_extractor import generate_product_description
#     from analytics_matcher import match_headline_to_keyword

#     for i, item in enumerate(data[2:3]):
#         images = item.get("Images", [])

#         if images:
#             product_description = generate_product_description(images)
#         else:
#             product_description = {}

#         product_name = item.get("product_name", [])

#         if product_name:
#             analytics = match_headline_to_keyword(product_name)
#         else:
#             analytics = {}


#         luxury_tagline = generate_luxury_tagline_from_json(product_description, item, analytics)

#         print(luxury_tagline)

# main()
